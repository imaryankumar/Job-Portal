.postedjobyou_header {
  background-color: #303f60;
  width: 100%;
  height: 18vh;
  color: white;
}
.postedjobyou_mytopbar {
  padding: 0 11rem;
}
.postedjobyou_section {
  background-color: #edf6ff;
  width: 100%;
  height: auto;
}
.postedjobyou_topbar {
  display: flex;
  text-align: center;
  align-items: center;
  padding-top: 5px;
}
.postedjobyou_topbar img {
  width: 10px;
  height: 9px;
  margin-right: 5px;
  margin-top: 3px;
  cursor: pointer;
}
.postedjobyou_topbar span {
  color: #ffffff;
  font-size: 12px;
  opacity: 80%;
  width: 33px;
  height: 15px;
  font: normal normal medium 12px/15px Helvetica Neue;
}
.postedjobyou_para {
  margin-top: 1rem;
}
.postedjobyou_para h1 {
  width: 201px;
  height: 26px;
  font: normal normal medium 22px/27px Helvetica Neue;
  letter-spacing: 0px;
  color: #ffffff;
  font-size: 22px;
}
.postedjob_allcards {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 2%;
  flex-wrap: wrap;
  margin-top: 2rem;
}
.postedjobyou_footers {
  display: flex;
  justify-content: center;
  text-align: center;
  align-items: center;
  gap: 10px;
  padding-top: 55rem;
  padding-bottom: 2rem;
}
.postedjobyou_footers img {
  width: 30px;
  height: 30px;
  background: transparent 0% 0% no-repeat padding-box;
  border-radius: 5px;
  padding: 7px;
  opacity: 0.6;
  cursor: pointer;
}
.postjobyou_span {
  width: 30px;
  height: 30px;
  border-radius: 5px;
  background: #43afff33 0% 0% no-repeat padding-box;
  text-align: center;
  font-size: 19px;
  font-weight: 400;
}
.postjoballcards {
  width: 260px;
  height: 162px;
  background: #ffffff 0% 0% no-repeat padding-box;
  box-shadow: 0px 3px 6px #557da526;
  border-radius: 5px;
  padding: 1rem;
  margin-right: 1rem;
  margin-bottom: 1rem;
  position: relative;
  text-transform: capitalize;
}
.postjob_mycard {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  padding: 1.5rem 2rem;
}
.postjobmycard_heading {
  width: 100%;
  height: 20px;
  font: normal normal normal 17px/20px Helvetica Neue;
  letter-spacing: 0px;
  color: #303f60;
  opacity: 1;
  font-size: 17px;
}

.postjobmycard_para {
  width: 229px;
  /* height: 64px; */
  font: normal normal normal 14px/16px Helvetica Neue;
  letter-spacing: 0px;
  color: #303f60;
  opacity: 0.8;
  margin: 8px 0;
}
.line_clamp {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
.line_clamps {
  display: -webkit-box;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
.postjobmycard_locsection {
  display: flex;
  align-items: center;
  text-align: center;
  justify-content: space-between;
  position: absolute;
  bottom: 1rem;
  justify-content: center;
}
.postjobmycard_locationcard {
  display: flex;
  margin-right: 1rem;
}
.postjobmycard_locationcard img {
  width: 10px;
  height: 15px;
  background: transparent 0% 0% no-repeat padding-box;
  opacity: 1;
}
.postjobmycard_h3 {
  width: 64px;
  height: 16px;
  font: normal normal normal 14px/16px Helvetica Neue;
  letter-spacing: 0px;
  color: #303f60;
  opacity: 0.8;
}
.postjobmycard_btn {
  width: 125px;
  height: 32px;
  background: #43afff33 0% 0% no-repeat padding-box;
  border-radius: 5px;
  opacity: 1;
  cursor: pointer;
  color: #303f60;
  text-transform: capitalize;
  font: normal normal normal 12px/14px Helvetica Neue;
  font-size: 12px;
  padding: 8px;
}

.modalWrapper {
  height: 100vh;
  width: 100vw;
  position: absolute;
  background: rgba(0, 0, 0, 0.8);
  top: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
}
.modal {
  background: #fff;
  width: 48%;
  height: 85%;
  margin: auto;
  position: relative;
  border-radius: 20px;
  display: flex;
  flex-direction: column;
  padding: 1rem 2rem;
}

.close {
  /* width: 20px;
  height: 20px; */
  border-radius: 50%;
  color: black;
  font-size: larger;
  font-weight: bolder;
  /* position: absolute; */
}
.wrapmodle {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.8rem 0;
  font-size: 19px;
  color: #303f60;
}
.modal_h3 {
  color: #303f60;
  font-size: 15px;
  padding: 0.5rem 0;
  font-size: 15px;
}
.modal_cards {
  background-color: #557da526;
  display: flex;
  justify-content: flex-start;
  width: 100%;
  height: 73vh;
  flex-wrap: wrap;
}
.modalempty_div {
  width: 650px;
  height: 560px;
}
.modalimgs {
  margin-bottom: 1rem;
  width: 100px;
  height: 106px;
  opacity: 0.5;
}
.modalempty_content {
  width: 630px;
  height: 550px;
  display: flex;
  text-align: center;
  align-items: center;
  flex-direction: column;
  justify-content: center;
  font-size: 20px;
  opacity: 0.8;
}
.modalheader {
  padding: 0.5rem;
}
.modalcards {
  width: 295px;
  height: 159px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #ffffff;
  border: 1px solid #303f6080;
  border-radius: 5px;
  padding: 0 0.5rem;
  flex-wrap: wrap;
}
.modalcard_txts {
  width: 274px;
  height: 131px;
  text-transform: capitalize;
}
.modalcard_content {
  display: flex;
  align-items: center;
}
.modalcard_span {
  width: 35px;
  height: 35px;
  border-radius: 25px;
  opacity: 1;
  background-color: #d9efff;
  color: #303f60;
  font-size: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-right: 1rem;
}

.modalcard_h2 {
  color: #303f60;
  font: 15px;
  opacity: 1;
}
.modalcard_h3 {
  color: #303f60;
  opacity: 0.8;
  font-size: 15px;
  opacity: 1;
}
.modalcard_skills {
  padding-top: 2rem;
}
.modalcard_skillsh3 {
  color: #1a253c;
  opacity: 0.8;
  font-size: 13px;
  opacity: 1;
}
.postedjob_section {
  background-color: #edf6ff;
  width: 100%;
  height: 90vh;
  margin-top: 3rem;
}
.postedjob_mySection {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 10rem 0;
}
.postedjob_h2 {
  width: 289px;
  height: 23px;
  color: #303f60;
  font-size: 20px;
  opacity: 0.8;
  padding: 1rem 0;
  font: normal normal normal 20px/24px Helvetica Neue;
}
.postjob_btn {
  width: 148px;
  height: 46px;
  background: #43afff 0% 0% no-repeat padding-box;
  border: 1px solid #43afff;
  border-radius: 5px;
  opacity: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 2.5rem;
  cursor: pointer;
  color: #ffffff;
}
/* media quries */
@media (max-width: 1168px) {
  .postedjobyou_mytopbar {
    padding: 0 7rem;
  }
  .postedjobyou_section {
    width: 100%;
    height: auto;
  }
  .postedjobyou_footers {
    padding-top: 78rem;
  }
  .modalempty_content {
    width: 510px;
    height: 550px;
    font-size: 20px;
    opacity: 0.8;
  }
  .modal {
    background: #fff;
    width: auto;
    height: auto;
    padding: 1rem 2rem;
  }
  .modalempty_div {
    width: auto;
    height: auto;
  }
  .wrapmodle {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.8rem 0;
    font-size: 15px;
    color: #303f60;
  }
  .modalWrapper {
    position: fixed;
  }
}
@media (max-width: 891px) {
  .postedjobyou_mytopbar {
    padding: 0 8rem;
  }
  .postedjobyou_section {
    width: 100%;
    height: auto;
  }
  .postedjobyou_footers {
    padding-top: 113rem;
  }
  .modalcards {
    width: 235px;
    height: 139px;
  }
  .modalcard_txts {
    width: 234px;
    height: 111px;
  }
  .modalcard_h2 {
    color: #303f60;
    font: 15px;
    opacity: 1;
  }
  .modalcard_h3 {
    color: #303f60;
    opacity: 0.8;
    font-size: 10px;
    opacity: 1;
  }
  .modalcard_skills {
    padding-top: 2rem;
  }
  .modalcard_skillsh3 {
    font-size: 10px;
  }
  .modalempty_content {
    width: 470px;
    height: 470px;
    font-size: 20px;
    opacity: 0.8;
  }
  .modal {
    background: #fff;
    width: auto;
    height: auto;
    padding: 1rem 2rem;
  }
  .modalempty_div {
    width: auto;
    height: auto;
  }
}
@media (max-width: 658px) {
  .modalcards {
    width: 208px;
    height: 129px;
  }
  .modalcard_txts {
    width: 214px;
    height: 91px;
  }
  .modalcard_h2 {
    color: #303f60;
    font: 10px;
    opacity: 1;
  }
  .modalcard_h3 {
    color: #303f60;
    opacity: 0.8;
    font-size: 8px;
    opacity: 1;
  }
  .modalcard_skills {
    padding-top: 2rem;
  }
  .modalcard_skillsh3 {
    font-size: 8px;
  }
  .modalempty_content {
    width: 470px;
    height: 470px;
    font-size: 20px;
    opacity: 0.8;
  }
  .modal {
    background: #fff;
    width: auto;
    height: auto;
    padding: 1rem 2rem;
  }
  .modalempty_div {
    width: auto;
    height: auto;
  }
  .modalWrapper {
    position: fixed;
  }
}
@media (max-width: 615px) {
  .postedjobyou_mytopbar {
    padding: 0 6rem;
  }
  .postedjobyou_section {
    width: 100%;
    height: auto;
  }
  .postedjobyou_footers {
    padding-top: 223rem;
  }
  .modalcards {
    width: 178px;
    height: 109px;
  }
  .modalcard_txts {
    width: 190px;
    height: 81px;
  }
  .modalcard_h2 {
    color: #303f60;
    font: 10px;
    opacity: 1;
  }
  .modalcard_h3 {
    color: #303f60;
    opacity: 0.8;
    font-size: 8px;
    opacity: 1;
  }
  .modalcard_skills {
    padding-top: 2rem;
  }
  .modalcard_skillsh3 {
    font-size: 8px;
  }
  .modalWrapper {
    height: 100vh;
    width: 100vw;
    position: absolute;
    background: rgba(0, 0, 0, 0.8);
    top: 0;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .modalempty_content {
    width: 280px;
    height: 280px;
    font-size: 18px;
    opacity: 0.8;
  }
  .modal {
    background: #fff;
    width: auto;
    height: auto;
    padding: 1rem 2rem;
  }
  .modalempty_div {
    width: auto;
    height: auto;
  }
  .modalWrapper {
    position: fixed;
  }
}
@media (max-width: 384px) {
  .postedjobyou_mytopbar {
    padding: 0 3rem;
  }
  .postedjobyou_section {
    width: 100%;
    height: auto;
  }
  .postedjobyou_footers {
    padding-top: 223rem;
  }
  .modalempty_content {
    width: 200px;
    height: 200px;
    font-size: 16px;
    opacity: 0.8;
  }
  .modal {
    background: #fff;
    width: auto;
    height: auto;
    padding: 1rem 2rem;
  }
  .modalWrapper {
    position: fixed;
  }
}
@media (max-width: 340px) {
  .postedjobyou_mytopbar {
    padding: 0 3rem;
  }
  .postedjobyou_section {
    width: 100%;
    height: auto;
  }
  .postedjobyou_footers {
    padding-top: 223rem;
  }
  .postjob_mycard {
    padding: 0 0.5rem;
  }
  .modalWrapper {
    position: fixed;
  }
}
@media (max-width: 340px) {
  .postjob_mycard {
    padding: auto;
  }
  .postedjobyou_mytopbar {
    padding: 0 2rem;
  }
  .postjoballcards {
    width: 240px;
    height: 152px;
  }
  .postedjobyou_footers {
    padding-top: 210rem;
  }
  .postedjobyou_section {
    width: 100%;
    height: auto;
  }
  .modalWrapper {
    position: fixed;
  }
}
/*
import Link from "next/link";
import { useContext, useEffect, useState, useMemo } from "react";
import { authcontext } from "../../components/contextapi/ContextAPI";
import { toast } from "react-toastify";

import Router, { useRouter } from "next/router";
import Seo from "../../components/nexthead/Seo";
import Image from "next/image";
import Loader from "../../components/Loader/Loader";

interface cardTypes {
  location?: string;
  title?: string;
  description?: string;
  id?: string;
  updatedAt?: any;
  email?: any;
  name?: string;
  skills?: string;
}
interface jobData {
  email: string;
  name: string;
  skills: string;
  id: string;
}
const Index = () => {
  const router = useRouter();
  const [count, setCount] = useState(1);
  const [isOpen, setIsOpen] = useState(false);
  const [jobData, setJobData] = useState<jobData[]>([]);
  const [totalPage, setTotalPage] = useState(0);
  const { user } = useContext(authcontext);
  const [myData, setMyData] = useState([]);
  const [loader, setLoader] = useState(true);

  useEffect(() => {
    const page = router.query?.page ? Number(router.query.page) : 1;
    if (!isNaN(page) && page > 0) {
      setCount(page);
      reloadData(page);
    }
  }, [router]);

  let myArray = useMemo(() => {
    if (!isNaN(totalPage)) {
      return Array(totalPage)
        .fill("")
        .map((e, index) => index + 1);
    }
    return [];
  }, [totalPage]);

  const pageDefiner = (num: any) => {
    if (num > 2) {
      return [num - 2, num - 1, num];
    } else {
      return [num - 1, num];
    }
  };

  const reloadData = (page: number) => {
    setLoader(true);
    fetch(
      `https://jobs-api.squareboat.info/api/v1/recruiters/jobs?page=${page}`,
      {
        method: "GET",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Authorization: JSON.parse(localStorage.getItem("user") || "{}")
            ?.token,
        },
      }
    )
      .then((res) => {
        res.json().then((resp) => {
          setMyData(resp.data?.data);
          setLoader(false);

          setTotalPage(
            Math.ceil(resp?.data?.metadata?.count / resp?.data?.metadata?.limit)
          );
        });
      })
      .catch((e) => {
        setLoader(false);
      });
  };

  //  const totalJobs = myData?.length;
  const increment = () => {
    if (count < totalPage) {
      count < totalPage && setCount(count + 1);
      router.push(`/postjobyou?page=${count + 1}`, undefined, {
        shallow: true,
      });
      window.scroll({
        top: 0,
        left: 0,
        behavior: "smooth",
      });
    }
  };
  const decrement = () => {
    if (count > 1) {
      count == 1 ? setCount(1) : setCount(count - 1);
      router.push(`/postjobyou?page=${count - 1}`, undefined, {
        shallow: true,
      });
      window.scroll({
        top: 0,
        left: 0,
        behavior: "smooth",
      });
    }
  };
  const onNumClick = (e: any) => {
    const numValue = +e.target.innerText;

    setCount(numValue);
    router.push(`/postjobyou?page=${numValue} `, undefined, {
      shallow: true,
    });
    window.scroll({
      top: 0,
      left: 0,
      behavior: "smooth",
    });
  };
  const postClick = (job_id: string | undefined) => {
    isOpen === false ? setIsOpen(true) : setIsOpen(false);
    setLoader(true);

    fetch(
      `https://jobs-api.squareboat.info/api/v1/recruiters/jobs/${job_id}/candidates`,
      {
        method: "GET",
        headers: { Authorization: `${user?.token}` },
      }
    )
      .then((res) => {
        return res.json();
      })
      .then((data) => {
        setJobData(data?.data);
        setLoader(false);
      })
      .catch((e) => {
        toast.error(e);
        toast.error("Error Found");
        setLoader(false);
      });
  };

  return (
    <>
      <Seo title="PostJobYou" />
      <div className="bg-[#1A253C] w-full h-[18vh] text-white">
        <div className="mainWrapper">
          <div className="md:px-44 py-0 px-20 ">
            <div className="flex text-center items-center pt-1">
              <Link href={"/"}>
                <Image
                  src="/iconsimgs/homeicon.png"
                  alt=""
                  width={10}
                  height={9}
                  className="mr-1 "
                />
              </Link>
              <Link href={"/"}>
                {" "}
                <span className="text-[12px] font-medium ">Home</span>
              </Link>
            </div>
            <div className="mt-4  ">
              <h1 className="text-[22px] font-medium ">Jobs posted by you</h1>
            </div>
          </div>
        </div>

        {loader ? (
          <Loader />
        ) : myData?.length > 0 ? (
          <div className="flex justify-center items-center flex-wrap md:mt-2 mt-4 gap-[2%] mainWrapper ">
            <div className="flex flex-wrap items-center justify-center md:px-8 md:py-6 px-4 py-4 ">
              {myData?.map((item: cardTypes, key) => {
                return (
                  <div
                    className="w-[260px] h-[162px] bg-white rounded p-4 mr-4 mb-4 relative capitalize shadow "
                    key={key}
                  >
                    <div
                      className={`w-full h-[20px] text-[17px]  text-[#303f60] tracking-normal overflow-hidden`}
                      key={key}
                    >
                      <h1>{item.title}</h1>
                    </div>
                    <div
                      className={`"w-[229px] mx-0 my-2 text-[14px] opacity-80 text-[#303f60] tracking-normal overflow-hidden`}
                    >
                      <p>{item.description}</p>
                    </div>
                    <div
                      className={`flex items-center text-center  absolute bottom-4 justify-center overflow-hidden`}
                    >
                      <div className="flex mr-4">
                        <div className="relative w-4 h-4 mr-2">
                          <Image
                            src="/iconsimgs/mypin.png"
                            alt=""
                            fill
                            className="absolute top-0 object-contain"
                          />
                        </div>
                        <h3
                          className={`w-[64px] h-[16px] line-clamps text-[14px] tracking-normal text-[#303f60] opacity-80`}
                        >
                          {item.location}
                        </h3>
                      </div>
                      <div>
                        <button
                          className={`w-[125px] h-[32px] bg-[#43afff33] rounded  cursor-pointer text-[#303f60] capitalize text-[12px] p-2 `}
                          onClick={() => postClick(item.id)}
                        >
                          View applications
                        </button>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        ) : (
          <>
            <Seo title="PostedJob" />

            <div className="bg-[#edf6ff] w-full h-[90vh] mt-12 ">
              <div className="flex flex-col items-center justify-center px-0 py-40">
                <Image
                  src="/iconsimgs/write.png"
                  alt=""
                  width={106}
                  height={106}
                />
                <h2 className="w-[289px] h-[23px] text-[#303f60] text-[20px] opacity-80 py-4 px-0  ">
                  Your posted jobs will show here!
                </h2>
                <button
                  className="w-40 h-[46px] bg-blue-400 border border-solid text-[16px] font-medium  border-blue-400 rounded  flex items-center justify-center mt-10 cursor-pointer text-white "
                  onClick={() => router.push("/jobpost")}
                >
                  Post a Job
                </button>
              </div>
            </div>
          </>
        )}
      </div>

      {myData?.length > 0 && totalPage > 1 && (
        <div className="bg-[#edf6ff] w-full h-auto border  ">
          <div className="flex justify-center text-center items-center gap-[10px] pt-[223rem] md:pt-[115rem] lg:pt-[80rem] xl:pt-[55rem] 2xl:pt-[30rem] pb-8  ">
            <Image
              src="/iconsimgs/left.png"
              alt=""
              onClick={() => decrement()}
              width={20}
              height={20}
            />
            {(count + 2 >= totalPage
              ? pageDefiner(totalPage)
              : [count, count + 1, count + 2]
            )?.map((i, key) => {
              return (
                <span
                  className="w-8 h-8 rounded bg-[#43afff33] text-center text-[19px] font-normal "
                  onClick={(e) => onNumClick(e)}
                  style={
                    count === i
                      ? {
                          color: "black",
                          backgroundColor: "#43AFFF33",
                          cursor: "pointer",
                        }
                      : { backgroundColor: "white", cursor: "pointer" }
                  }
                  key={key}
                >
                  {i}
                </span>
              );
            })}
            {count + 2 >= totalPage ? (
              ""
            ) : (
              <>
                ...
                <div
                  className="w-8 h-8 rounded bg-[#43afff33] text-center text-[19px] font-[400] "
                  onClick={() => onNumClick(totalPage)}
                >
                  {totalPage}
                </div>
              </>
            )}

            <Image
              src="/iconsimgs/right.png"
              alt=""
              onClick={() => increment()}
              width={20}
              height={20}
            />
          </div>
        </div>
      )}
      {isOpen && (
        <>
          <div
            className="h-screen w-screen fixed bg top-0 flex justify-center items-center "
            onClick={() => setIsOpen(false)}
          >
            <div
              className="bg-[#fff] md:w-[694px] w-[310px] h-[580px] md:h-[731] m-auto relative rounded-[20px] flex flex-col xs:py-8 xs:px-4  py-6 px-8  border border-red-500  "
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between px-0 py-3 text-[19px] text-[#303f60] font-medium  ">
                <h2>Applicants for this job</h2>
                <button
                  onClick={() => setIsOpen(false)}
                  className="rounded-[50%] text-black text-lg  font-extrabold opacity-80 "
                >
                  X
                </button>
              </div>
              <hr />
              <h3 className="text-[#303f60] text-[15px] px-0 py-2 ">
                Total {jobData ? jobData.length : 0} applications
              </h3>
              <div className="bg-[#557da526] flex justify-center flex-wrap overflow-auto h-full">
                {loader ? (
                  <Loader />
                ) : jobData ? (
                  jobData?.map((items: cardTypes, k) => {
                    return (
                      <div key={k} className="">
                        <div
                          key={k}
                          className=" md:w-[295px] w-[250px]  md:h-[159px] flex items-center justify-center bg-white border border-solid border-[#303f6080] rounded py-0 px-2  flex-wrap  "
                        >
                          <div className="w-[274px] h-[131px] capitalize  ">
                            <div className="flex items-center  ">
                              <span className="w-[35px] h-[35px] rounded-[25px]  bg-[#d9efff] text-[#303f60] text-[20px] flex justify-center items-center mr-4  ">
                                {items.name?.slice(0, 1)}
                              </span>
                              <div>
                                <h2
                                  className={`text-[#303f60] text-[15px] font-medium  line-clamps`}
                                >
                                  {items.name}
                                </h2>
                                <h3
                                  className={`text-[#303f60]  text-[15px] line-clamps`}
                                >
                                  {items.email}
                                </h3>
                              </div>
                            </div>

                            <div className="pt-8">
                              <h2 className="text-[#1a253c]  text-[13px] font-medium  ">
                                Skills
                              </h2>
                              <h3
                                className={`text-[#303f60] text-[15px] line-clamps`}
                              >
                                {items.skills}
                              </h3>
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })
                ) : (
                  <div className="w-auto h-auto ">
                    <div className="md:h-[454px] md:w-[610px] h-[330px] w-[270px] text-[20px] opacity-80 flex flex-col justify-center items-center">
                      <Image
                        src="/iconsimgs/resume.png"
                        alt=""
                        className="mb-4 w-[100px] h-[106px] opacity-50 "
                        width={100}
                        height={106}
                      />
                      <h3>No applications available!</h3>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </>
      )}
    </>
  );
};

export default Index;

*/
